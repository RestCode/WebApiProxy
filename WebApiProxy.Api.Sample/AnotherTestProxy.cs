//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Newtonsoft.Json;
using WebApiProxy.Tasks.Models;
using WebApi.Proxies.AnotherTestProxy.Models;


#region Proxies
namespace WebApi.Proxies.AnotherTestProxy
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string AnotherTestProxyBaseAddress = "http://localhost:12016/";
	}
}
#endregion

#region Models
namespace WebApi.Proxies.AnotherTestProxy.Models
{

	
	/// <summary>
	/// 
	/// </summary>
	public partial class ComplexModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Age { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GenericBase<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual T Id { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class NestedModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ComplexModel ComplexModel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TotalResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String SimpleStr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ComplexModel ComplexModel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual NestedModel NestedModel { get; set; }
		#endregion
	}	

	
}
#endregion

#region Interfaces
namespace WebApi.Proxies.AnotherTestProxy.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface ITestClient : IClientBase
	{	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>

		Task<GenericBase<String>> GetFromSimpleArgAsync(String id);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		GenericBase<String> GetFromSimpleArg(String id);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="dataArg"></param>

		Task<ComplexModel> GetFromComplexArgAsync(ComplexModel dataArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="dataArg"></param>
		/// <returns></returns>
		ComplexModel GetFromComplexArg(ComplexModel dataArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="dataArg"></param>

		Task<NestedModel> GetFromMixedArgAsync(Int32 id,ComplexModel dataArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="dataArg"></param>
		/// <returns></returns>
		NestedModel GetFromMixedArg(Int32 id,ComplexModel dataArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriNestedArg"></param>
		/// <param name="bodyComplexArg"></param>

		Task<TotalResult> PostFromMixedArgAsync(String simpleStr,NestedModel uriNestedArg,ComplexModel bodyComplexArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriNestedArg"></param>
		/// <param name="bodyComplexArg"></param>
		/// <returns></returns>
		TotalResult PostFromMixedArg(String simpleStr,NestedModel uriNestedArg,ComplexModel bodyComplexArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriComplexArg"></param>
		/// <param name="bodyNestedArg"></param>

		Task<TotalResult> PostFromMixedArg2Async(String simpleStr,ComplexModel uriComplexArg,NestedModel bodyNestedArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriComplexArg"></param>
		/// <param name="bodyNestedArg"></param>
		/// <returns></returns>
		TotalResult PostFromMixedArg2(String simpleStr,ComplexModel uriComplexArg,NestedModel bodyNestedArg);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> PutAsync(Int32 id,String value);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		void Put(Int32 id,String value);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAsync(Int32 id);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		void Delete(Int32 id);
				
	}

}
#endregion

#region Clients
namespace WebApi.Proxies.AnotherTestProxy.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.AnotherTestProxyBaseAddress)
			};

			SerializationSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
            };
		}

        public JsonSerializerSettings SerializationSettings;

		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
            throw new WebApiProxyResponseException(response);
		}

		protected virtual string GenerateQueryStrFromKvList(List<KeyValuePair<string, object>> kvList)
	    {
            var urlTpl = string.Join("&",
                             kvList.Select(item =>
                             {
                                 var queryKey = Uri.EscapeDataString(item.Key);
                                 var queryValue = string.Empty;

								 if (item.Value != null)
                                  {
										if (item.Value is string)
										{
											queryValue = Uri.EscapeDataString((string)item.Value);
										}
										else
										{
											var queryValueJson = JsonConvert.SerializeObject(item.Value,SerializationSettings).Trim('"');
											queryValue = Uri.EscapeDataString(queryValueJson);
										}
							      }
                                 return queryKey + "=" + queryValue;
                             }));
	        return urlTpl;
	    }

		
		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.AnotherTestProxyBaseAddress)
			};
		}


		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
		public TestClient Test { get; private set; }
		
        protected IEnumerable<Interfaces.IClientBase> Clients
        {
            get
            {
				yield return Test;
            }
        }

		public WebApiClients(Uri baseAddress = null)
		{
            if (baseAddress != null)
                Configuration.AnotherTestProxyBaseAddress = baseAddress.AbsoluteUri;

			Test = new TestClient();
		}

        public void SetAuthentication(AuthenticationHeaderValue auth)
        {
            foreach (var client in Clients)
                client.HttpClient.DefaultRequestHeaders.Authorization = auth;
        }
		
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var client in Clients)
                    client.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

		~WebApiClients() 
		{
            Dispose(false);
		}
	}

	/// <summary>
	/// 
	/// </summary>
	public partial class TestClient : ClientBase, Interfaces.ITestClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TestClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TestClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

	


		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<GenericBase<String>> GetFromSimpleArgAsync(String id)
		{
		    var requestUrl = "api/test/GetFromSimpleArg";
		
	
			var queryHasParamUrl = "id="+Uri.EscapeDataString(Convert.ToString(id))+"";


		
			var queryNoParamUrl = string.Empty;
		
		        
			if (string.IsNullOrEmpty(queryHasParamUrl))
			{
				requestUrl = requestUrl + "?" + queryNoParamUrl;
			}
			else
			{
				requestUrl = requestUrl + "?" + queryHasParamUrl + "&" + queryNoParamUrl;
			}
            
	
			var result = await HttpClient.GetAsync(requestUrl );
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<GenericBase<String>>();
		}


	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual GenericBase<String> GetFromSimpleArg(String id)
		{

			return GetFromSimpleArgAsync(id).Result;

		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="dataArg"></param>
		/// <returns></returns>
		public virtual async Task<ComplexModel> GetFromComplexArgAsync(ComplexModel dataArg)
		{
		    var requestUrl = "api/test/GetFromComplexArg";
		
	
			var queryHasParamUrl = "";


		
			var queryNoParamUrl = GenerateGetFromComplexArgQueryString(dataArg);
		
		        
			if (string.IsNullOrEmpty(queryHasParamUrl))
			{
				requestUrl = requestUrl + "?" + queryNoParamUrl;
			}
			else
			{
				requestUrl = requestUrl + "?" + queryHasParamUrl + "&" + queryNoParamUrl;
			}
            
	
			var result = await HttpClient.GetAsync(requestUrl );
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<ComplexModel>();
		}


					
		protected virtual string GenerateGetFromComplexArgQueryString(ComplexModel dataArg)
		{
			var kvList = GenerateGetFromComplexArgKeyValueList( dataArg );
            var urlTpl = GenerateQueryStrFromKvList(kvList);

        	return urlTpl;
		}

		protected virtual List<KeyValuePair<string, object>> GenerateGetFromComplexArgKeyValueList(ComplexModel dataArg)
		{
			// Name={Name}&Age={Age}
			throw new NotImplementedException();
		}

	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="dataArg"></param>
		public virtual ComplexModel GetFromComplexArg(ComplexModel dataArg)
		{

			return GetFromComplexArgAsync(dataArg).Result;

		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="dataArg"></param>
		/// <returns></returns>
		public virtual async Task<NestedModel> GetFromMixedArgAsync(Int32 id,ComplexModel dataArg)
		{
		    var requestUrl = "api/test/GetFromMixedArg";
		
	
			var queryHasParamUrl = "id="+Uri.EscapeDataString(Convert.ToString(id))+"";


		
			var queryNoParamUrl = GenerateGetFromMixedArgQueryString(id, dataArg);
		
		        
			if (string.IsNullOrEmpty(queryHasParamUrl))
			{
				requestUrl = requestUrl + "?" + queryNoParamUrl;
			}
			else
			{
				requestUrl = requestUrl + "?" + queryHasParamUrl + "&" + queryNoParamUrl;
			}
            
	
			var result = await HttpClient.GetAsync(requestUrl );
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<NestedModel>();
		}


					
		protected virtual string GenerateGetFromMixedArgQueryString(Int32 id,ComplexModel dataArg)
		{
			var kvList = GenerateGetFromMixedArgKeyValueList( id, dataArg );
            var urlTpl = GenerateQueryStrFromKvList(kvList);

        	return urlTpl;
		}

		protected virtual List<KeyValuePair<string, object>> GenerateGetFromMixedArgKeyValueList(Int32 id,ComplexModel dataArg)
		{
			// Name={Name}&Age={Age}
			throw new NotImplementedException();
		}

	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="dataArg"></param>
		public virtual NestedModel GetFromMixedArg(Int32 id,ComplexModel dataArg)
		{

			return GetFromMixedArgAsync(id, dataArg).Result;

		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriNestedArg"></param>
		/// <param name="bodyComplexArg"></param>
		/// <returns></returns>
		public virtual async Task<TotalResult> PostFromMixedArgAsync(String simpleStr,NestedModel uriNestedArg,ComplexModel bodyComplexArg)
		{
		    var requestUrl = "api/test/PostFromMixedArg";
		
	
			var queryHasParamUrl = "simpleStr="+Uri.EscapeDataString(Convert.ToString(simpleStr))+"";


		
			var queryNoParamUrl = string.Empty;
		
		        
			if (string.IsNullOrEmpty(queryHasParamUrl))
			{
				requestUrl = requestUrl + "?" + queryNoParamUrl;
			}
			else
			{
				requestUrl = requestUrl + "?" + queryHasParamUrl + "&" + queryNoParamUrl;
			}
            
	
			var result = await HttpClient.PostAsJsonAsync<ComplexModel>(requestUrl , bodyComplexArg);
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<TotalResult>();
		}


	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriNestedArg"></param>
		/// <param name="bodyComplexArg"></param>
		public virtual TotalResult PostFromMixedArg(String simpleStr,NestedModel uriNestedArg,ComplexModel bodyComplexArg)
		{

			return PostFromMixedArgAsync(simpleStr, uriNestedArg, bodyComplexArg).Result;

		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriComplexArg"></param>
		/// <param name="bodyNestedArg"></param>
		/// <returns></returns>
		public virtual async Task<TotalResult> PostFromMixedArg2Async(String simpleStr,ComplexModel uriComplexArg,NestedModel bodyNestedArg)
		{
		    var requestUrl = "api/test/PostFromMixedArg2";
		
	
			var queryHasParamUrl = "simpleStr="+Uri.EscapeDataString(Convert.ToString(simpleStr))+"";


		
			var queryNoParamUrl = GeneratePostFromMixedArg2QueryString(simpleStr, uriComplexArg, bodyNestedArg);
		
		        
			if (string.IsNullOrEmpty(queryHasParamUrl))
			{
				requestUrl = requestUrl + "?" + queryNoParamUrl;
			}
			else
			{
				requestUrl = requestUrl + "?" + queryHasParamUrl + "&" + queryNoParamUrl;
			}
            
	
			var result = await HttpClient.PostAsJsonAsync<NestedModel>(requestUrl , bodyNestedArg);
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<TotalResult>();
		}


					
		protected virtual string GeneratePostFromMixedArg2QueryString(String simpleStr,ComplexModel uriComplexArg,NestedModel bodyNestedArg)
		{
			var kvList = GeneratePostFromMixedArg2KeyValueList( simpleStr, uriComplexArg, bodyNestedArg );
            var urlTpl = GenerateQueryStrFromKvList(kvList);

        	return urlTpl;
		}

		protected virtual List<KeyValuePair<string, object>> GeneratePostFromMixedArg2KeyValueList(String simpleStr,ComplexModel uriComplexArg,NestedModel bodyNestedArg)
		{
			// Name={Name}&Age={Age}
			throw new NotImplementedException();
		}

	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="simpleStr"></param>
		/// <param name="uriComplexArg"></param>
		/// <param name="bodyNestedArg"></param>
		public virtual TotalResult PostFromMixedArg2(String simpleStr,ComplexModel uriComplexArg,NestedModel bodyNestedArg)
		{

			return PostFromMixedArg2Async(simpleStr, uriComplexArg, bodyNestedArg).Result;

		}





		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> PutAsync(Int32 id,String value)
		{
		    var requestUrl = "api/Test/"+Uri.EscapeUriString(Convert.ToString(id))+"";

	
			return await HttpClient.PutAsJsonAsync<String>(requestUrl , value);
		}


	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>
		public virtual void Put(Int32 id,String value)
		{

			var result = PutAsync(id, value).Result; 
			EnsureSuccess(result);


		}





		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAsync(Int32 id)
		{
		    var requestUrl = "api/Test/"+Uri.EscapeUriString(Convert.ToString(id))+"";

	
			return await HttpClient.DeleteAsync(requestUrl );
		}


	

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual void Delete(Int32 id)
		{

			var result = DeleteAsync(id).Result; 
			EnsureSuccess(result);


		}

		#endregion
	}

}

#endregion

