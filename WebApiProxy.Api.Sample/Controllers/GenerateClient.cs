//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Newtonsoft.Json;
using Test.Proxies.Models;

#region Proxies
namespace Test.Proxies
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string TestProxyBaseAddress = "http://localhost:12016/";
	}
}
#endregion

#region Models
namespace Test.Proxies.Models
{

 public class WebApiProxyResponseException : Exception
  {

    public HttpResponseMessage Response { get; private set; }


    public WebApiProxyResponseException(HttpResponseMessage response): base("A " + response.StatusCode + " (" + (int)response.StatusCode + ") http exception occured. See response.")
		{
			Response = response;
		}
	}


	
	/// <summary>
	/// 
	/// </summary>
	public partial class Case2Model
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Age { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Case3Model
	{
		#region Constants
		#endregion

		#region Properties
		#endregion
	}	

	
}
#endregion

#region Interfaces
namespace Test.Proxies.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface ITestClient : IClientBase
	{	

		/// <summary>
		/// 
		/// </summary>

		/// <returns></returns>
		Task<HttpResponseMessage> Case1Async();

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		void Case1();

		/// <summary>
		/// 
		/// </summary>

		Task<Case2Model> Case2Async(Case2Model dataFrom);

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		Case2Model Case2(Case2Model dataFrom);

		/// <summary>
		/// 
		/// </summary>

		Task<Case3Model> Case3Async(Case3Model dataFrom);

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		Case3Model Case3(Case3Model dataFrom);

		/// <summary>
		/// 
		/// </summary>

		/// <returns></returns>
		Task<HttpResponseMessage> PostAsync(String value);

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		void Post(String value);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> PutAsync(Int32 id,String value);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		void Put(Int32 id,String value);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAsync(Int32 id);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		void Delete(Int32 id);
				
	}

}
#endregion

#region Clients
namespace Test.Proxies.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.TestProxyBaseAddress)
			};

			SerializationSettings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
            };
		}

        public JsonSerializerSettings SerializationSettings;

		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
            throw new WebApiProxyResponseException(response);
		}

		public virtual string GenerateQueryStrFromKvList(List<KeyValuePair<string, object>> kvList)
	    {
            var urlTpl = string.Join("&",
                             kvList.Select(item =>
                             {
                                 var queryKey = Uri.EscapeDataString(item.Key);
                                 var queryValue = string.Empty;

								 if (item.Value != null)
                                  {
										if (item.Value is string)
										{
											queryValue = Uri.EscapeDataString((string)item.Value);
										}
										else
										{
											var queryValueJson = JsonConvert.SerializeObject(item.Value,SerializationSettings).Trim('"');
											queryValue = Uri.EscapeDataString(queryValueJson);
										}
							      }
                                 return queryKey + "=" + queryValue;
                             }));
	        return urlTpl;
	    }

		
		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.TestProxyBaseAddress)
			};
		}


		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
		public TestClient Test { get; private set; }
		
        protected IEnumerable<Interfaces.IClientBase> Clients
        {
            get
            {
				yield return Test;
            }
        }

		public WebApiClients(Uri baseAddress = null)
		{
            if (baseAddress != null)
                Configuration.TestProxyBaseAddress = baseAddress.AbsoluteUri;

			Test = new TestClient();
		}

        public void SetAuthentication(AuthenticationHeaderValue auth)
        {
            foreach (var client in Clients)
                client.HttpClient.DefaultRequestHeaders.Authorization = auth;
        }
		
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var client in Clients)
                    client.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

		~WebApiClients() 
		{
            Dispose(false);
		}
	}

	/// <summary>
	/// 
	/// </summary>
	public partial class TestClient : ClientBase, Interfaces.ITestClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TestClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TestClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

	



		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> Case1Async()
		{
		    var requestUrl = "api/test/case1";
			
			return await HttpClient.PostAsJsonAsync(requestUrl , default(HttpResponseMessage));
		}




		/// <summary>
		/// 
		/// </summary>
		public virtual void Case1()
		{

			var result = Task.Run(() => Case1Async()).Result; 
			EnsureSuccess(result);


		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="dataFrom"></param>
		/// <returns></returns>
		public virtual async Task<Case2Model> Case2Async(Case2Model dataFrom)
		{
		    var requestUrl = "api/test/case2";
			
			var result = await HttpClient.PostAsJsonAsync<Case2Model>(requestUrl , dataFrom);
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<Case2Model>();
		}



		/// <summary>
		/// 
		/// </summary>
		public virtual Case2Model Case2(Case2Model dataFrom)
		{

			return Case2Async(dataFrom).Result;

		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="dataFrom"></param>
		/// <returns></returns>
		public virtual async Task<Case3Model> Case3Async(Case3Model dataFrom)
		{
		    var requestUrl = "api/test/case3";
			
			var result = await HttpClient.PostAsJsonAsync<Case3Model>(requestUrl , dataFrom);
		

			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<Case3Model>();
		}



		/// <summary>
		/// 
		/// </summary>
		public virtual Case3Model Case3(Case3Model dataFrom)
		{

			return Case3Async(dataFrom).Result;

		}





		/// <summary>
		/// 
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> PostAsync(String value)
		{
		    var requestUrl = "api/Test";
			
			return await HttpClient.PostAsJsonAsync<String>(requestUrl , value);
		}




		/// <summary>
		/// 
		/// </summary>
		public virtual void Post(String value)
		{

			var result = Task.Run(() => PostAsync(value)).Result; 
			EnsureSuccess(result);


		}





		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> PutAsync(Int32 id,String value)
		{
		    var requestUrl = "api/Test/"+Uri.EscapeUriString(Convert.ToString(id))+"";
			
			return await HttpClient.PutAsJsonAsync<String>(requestUrl , value);
		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual void Put(Int32 id,String value)
		{

			var result = Task.Run(() => PutAsync(id, value)).Result; 
			EnsureSuccess(result);


		}





		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAsync(Int32 id)
		{
		    var requestUrl = "api/Test/"+Uri.EscapeUriString(Convert.ToString(id))+"";
			
			return await HttpClient.DeleteAsync(requestUrl );
		}




		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual void Delete(Int32 id)
		{

			var result = Task.Run(() => DeleteAsync(id)).Result; 
			EnsureSuccess(result);


		}

		#endregion
	}

}

#endregion

