// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WebApiProxy.Tasks.Templates
{
    using System.Linq;
    using System.Text;
    using WebApiProxy.Core.Models;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class CSharpProxyTemplate : CSharpProxyTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using ");
            
            #line 20 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Namespace));
            
            #line default
            #line hidden
            this.Write(".Models;\r\n\r\n#region Proxies\r\nnamespace ");
            
            #line 23 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t/// <summary>\r\n\t/// Client configuration.\r\n\t/// </summary>\r\n\tpublic partial" +
                    " class Configuration\r\n\t{\r\n\t\t/// <summary>\r\n\t\t/// Web Api Base Address.\r\n\t\t/// </" +
                    "summary>\r\n\t\tpublic static string ");
            
            #line 33 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Name));
            
            #line default
            #line hidden
            this.Write("BaseAddress = \"");
            
            #line 33 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Metadata.Host));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\r\n\t}\r\n}\r\n#endregion\r\n\r\n#region Models\r\nnamespace ");
            
            #line 40 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Namespace));
            
            #line default
            #line hidden
            this.Write(@".Models
{

 public class WebApiProxyResponseException : Exception
  {

    public HttpResponseMessage Response { get; private set; }


    public WebApiProxyResponseException(HttpResponseMessage response): base(""A "" + response.StatusCode + "" ("" + (int)response.StatusCode + "") http exception occured. See response."")
		{
			Response = response;
		}
	}


");
            
            #line 56 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("class"))) { 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t/// <summary>\r\n\t/// ");
            
            #line 58 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Description.ToSummary()));
            
            #line default
            #line hidden
            this.Write("\r\n\t/// </summary>\r\n\tpublic partial class ");
            
            #line 60 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\t#region Constants\r\n");
            
            #line 63 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var constantItem in model.Constants) { 
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n\t\t/// ");
            
            #line 65 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Description.ToSummary()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n\t\tpublic const ");
            
            #line 67 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Type));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 67 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 67 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Value));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 68 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t#endregion\r\n\r\n\t\t#region Properties\r\n");
            
            #line 72 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var propertyItem in model.Properties) { 
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n\t\t/// ");
            
            #line 74 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyItem.Description.ToSummary()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n\t\tpublic virtual ");
            
            #line 76 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyItem.Type));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 76 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyItem.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 77 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t#endregion\r\n\t}\t\r\n");
            
            #line 80 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 82 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("enum"))) { 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t/// <summary>\r\n\t/// ");
            
            #line 84 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Description.ToSummary()));
            
            #line default
            #line hidden
            this.Write("\r\n\t/// </summary>\r\n\tpublic enum ");
            
            #line 86 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 88 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var constantItem in model.Constants) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// <summary>\r\n\t\t/// ");
            
            #line 91 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Description.ToSummary()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n\t\t");
            
            #line 93 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 93 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constantItem.Value));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 94 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t}\r\n");
            
            #line 96 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n}\r\n#endregion\r\n\r\n#region Interfaces\r\nnamespace ");
            
            #line 102 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Namespace));
            
            #line default
            #line hidden
            this.Write(".Interfaces\r\n{\r\n\tpublic interface IClientBase : IDisposable\r\n\t{\r\n\t\tHttpClient Htt" +
                    "pClient { get; }\r\n\t}\r\n\r\n");
            
            #line 109 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var definition in Configuration.Metadata.Definitions) { 
            
            #line default
            #line hidden
            this.Write("\t\r\n\tpublic partial interface I");
            
            #line 110 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name));
            
            #line default
            #line hidden
            
            #line 110 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.ClientSuffix));
            
            #line default
            #line hidden
            this.Write(" : IClientBase\r\n\t{\t\r\n");
            
            #line 112 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		//var queryParameterString = "\"";
		var bodyParameterString = "";


		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}
	
		var parameterList = "";

		if (allParameters.Any())
		{
			var q = allParameters.Select(m => m.Type + " " + m.Name);
			if (q != null)
				parameterList = string.Join(",", q.ToArray());
		}		

            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// <summary>\r\n\t\t/// ");
            
            #line 135 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Description));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n");
            
            #line 137 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var p in method.UrlParameters) { 
            
            #line default
            #line hidden
            this.Write("\t\t/// <param name=\"");
            
            #line 138 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 138 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Description));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 139 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\tTask<HttpResponseMessage> ");
            
            #line 140 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("Async(");
            
            #line 140 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n\t\t/// <summary>\r\n\t\t/// ");
            
            #line 143 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Description));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n");
            
            #line 145 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var p in method.UrlParameters) {
            
            #line default
            #line hidden
            this.Write("\t\t/// <param name=\"");
            
            #line 146 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 146 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Description));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 147 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 148 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 148 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 148 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 149 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t}\r\n");
            
            #line 151 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n}\r\n#endregion\r\n\r\n#region Clients\r\nnamespace ");
            
            #line 157 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Namespace));
            
            #line default
            #line hidden
            this.Write(@".Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref=""ClientBase""/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.");
            
            #line 176 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.Name));
            
            #line default
            #line hidden
            this.Write(@"BaseAddress)
			};
		}

		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
            throw new WebApiProxyResponseException(response);
		}

		public virtual string GenerateQueryStrFromKvList(List<KeyValuePair<string, object>> kvList)
	    {
            var urlTpl = string.Join(""&"",
                             kvList.Select(item =>
                             {
                                 var queryKey = Uri.EscapeDataString(item.Key);
                                 var queryValue = string.Empty;
                                 if (item.Value != null)
                                 {
                                     queryValue = Uri.EscapeDataString(item.Value.ToString());
                                 }
                                 return queryKey + ""="" + queryValue;
                             }));
	        return urlTpl;
	    }

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}
	}

");
            
            #line 213 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var definition in Configuration.Metadata.Definitions) { 
            
            #line default
            #line hidden
            this.Write("\t/// <summary>\r\n\t/// ");
            
            #line 215 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Description.ToSummary()));
            
            #line default
            #line hidden
            this.Write("\r\n\t/// </summary>\r\n\tpublic partial class ");
            
            #line 217 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name));
            
            #line default
            #line hidden
            
            #line 217 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.ClientSuffix));
            
            #line default
            #line hidden
            this.Write(" : ClientBase, Interfaces.I");
            
            #line 217 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name));
            
            #line default
            #line hidden
            
            #line 217 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.ClientSuffix));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\t\t\r\n\t\tpublic ");
            
            #line 219 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name));
            
            #line default
            #line hidden
            
            #line 219 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.ClientSuffix));
            
            #line default
            #line hidden
            this.Write("() : base()\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t#region Methods\r\n");
            
            #line 224 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable();
		
		var queryParameterString = "\"";
		var bodyParameterString = ", default(HttpResponseMessage)";
		var parameterNameList = "";

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}


		if (allParameters.Any()) {
			queryParameterString = "?";
			queryParameterString += string.Join(" + \"&", allParameters.Where(m => m != null).Select(m => m.Name + "=\" + " + m.Name).ToArray());
			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));
		}

		var parameterList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Where(m => m != null).Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());
		}

		var postOrPut =  method.Type.ToTitle() == "Post" || method.Type.ToTitle() == "Put";

		var urlParts = method.Url.Split(new[] {"?"}, StringSplitOptions.RemoveEmptyEntries);
		var requestUrl = urlParts[0];
		var urlQueryString = string.Empty;
		var hasQueryString = false;

        if (urlParts.Length > 1)
		{
            urlQueryString = urlParts[1];
		    hasQueryString = true;
		}

		requestUrl = System.Text.RegularExpressions.Regex.Replace(requestUrl, @"\{(.*?)\}", "\"+Uri.EscapeUriString(Convert.ToString($1))+\"");


		var urlQueryParts = urlQueryString.Split(new[] {"&"}, StringSplitOptions.RemoveEmptyEntries)
										.Select(item =>
												{
													var kvParts = item.Split(new[] {"="},
																			StringSplitOptions.RemoveEmptyEntries);
													return new KeyValuePair<string, string>(kvParts[0], kvParts[1]);
												})
										.ToList();

		var queryHasParams =
		urlQueryParts.Where(
							item =>
							allParameters.Any(param =>
												string.Equals(item.Value, "{" + param.Name + "}",
															StringComparison.OrdinalIgnoreCase)))
						.ToList();

		var queryHasParamUrlTpl = string.Join("&",
											queryHasParams.Select(
																	item =>
																	string.Format("{0}={1}", item.Key, item.Value)));

		var queryHasParamUrl = System.Text.RegularExpressions.Regex.Replace(queryHasParamUrlTpl, @"\{(.*?)\}", "\"+Uri.EscapeDataString(Convert.ToString($1))+\"");


		var queryHasNoParams = urlQueryParts.Except(queryHasParams).ToList();
		var queryNoParamUrlTpl = string.Join("&",
											queryHasNoParams.Select(
																	item =>
																	string.Format("{0}={1}", item.Key, item.Value)));

            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// <summary>\r\n\t\t/// ");
            
            #line 302 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Description));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n");
            
            #line 304 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var p in method.UrlParameters) { 
            
            #line default
            #line hidden
            this.Write("\t\t/// <param name=\"");
            
            #line 305 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 305 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Description));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 306 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\tpublic virtual async Task<HttpResponseMessage> ");
            
            #line 307 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("Async(");
            
            #line 307 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tvar requestUrl = \"");
            
            #line 309 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(requestUrl));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t");
            
            #line 310 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 if(hasQueryString){  
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\tvar queryHasParamUrl = \"");
            
            #line 312 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(queryHasParamUrl));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n\r\n\t\t\t\t");
            
            #line 315 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 if(!string.IsNullOrEmpty(queryNoParamUrlTpl)){  
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tvar queryNoParamUrlTpl = \"");
            
            #line 316 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(queryNoParamUrlTpl));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t\t\tvar queryNoParamUrl = Generate");
            
            #line 317 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("QueryString(queryNoParamUrlTpl, ");
            
            #line 317 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterNameList));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t");
            
            #line 318 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 }else{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tvar queryNoParamUrl = string.Empty;\r\n\t\t\t\t");
            
            #line 320 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\t\tif (string.IsNullOrEmpty(queryHasParamUrl))\r\n\t\t\t\t{\r\n\t\t\t\t\trequestUrl = re" +
                    "questUrl + \"?\" + queryNoParamUrl;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\trequestUrl = req" +
                    "uestUrl + \"?\" + queryHasParamUrl + \"&\" + queryNoParamUrl;\r\n\t\t\t\t}\r\n\r\n\t\t\t");
            
            #line 331 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\treturn await HttpClient.");
            
            #line 333 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Type.ToTitle()));
            
            #line default
            #line hidden
            
            #line 333 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(postOrPut ? "AsJson" : ""));
            
            #line default
            #line hidden
            this.Write("Async");
            
            #line 333 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(postOrPut && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : ""));
            
            #line default
            #line hidden
            this.Write("(requestUrl ");
            
            #line 333 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(postOrPut ? bodyParameterString:""));
            
            #line default
            #line hidden
            this.Write(").ConfigureAwait(false);\r\n\t\t}\r\n\r\n\t\t");
            
            #line 336 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 if(hasQueryString && !string.IsNullOrEmpty(queryNoParamUrlTpl)){  
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\tpublic virtual string Generate");
            
            #line 338 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("QueryString(string urlQueryString, ");
            
            #line 338 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t{\r\n\t\t\t\tvar kvList = Generate");
            
            #line 340 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("KeyValueList( ");
            
            #line 340 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterNameList));
            
            #line default
            #line hidden
            this.Write(" );\r\n                var urlTpl = GenerateQueryStrFromKvList(kvList);\r\n\r\n        " +
                    "\t    return urlTpl;\r\n\t\t\t}\r\n\r\n\t\t\tpublic virtual List<KeyValuePair<string, object>" +
                    "> Generate");
            
            #line 346 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("KeyValueList(");
            
            #line 346 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t{\r\n\t\t\t\tthrow new NotImplementedException();\r\n\t\t\t}\r\n\r\n\r\n\t\t");
            
            #line 352 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\t/// <summary>\r\n\t\t/// ");
            
            #line 356 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Description));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// </summary>\r\n");
            
            #line 358 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 foreach(var p in method.UrlParameters) { 
            
            #line default
            #line hidden
            this.Write("\t\t/// <param name=\"");
            
            #line 359 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 359 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Description));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 360 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\tpublic virtual ");
            
            #line 361 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 361 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 361 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tvar result = ");
            
            #line 363 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("Async(");
            
            #line 363 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterNameList));
            
            #line default
            #line hidden
            this.Write(").Result;\t\t \r\n\t\t\t \r\n\t\t\tEnsureSuccess(result);\r\n\t\t\t\t \r\n\t\t\t");
            
            #line 367 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 if(!String.IsNullOrEmpty(method.ReturnType) && method.ReturnType != "void" ) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t \t\t\t \r\n\t\t\treturn result.Content.ReadAsAsync<");
            
            #line 368 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.ReturnType));
            
            #line default
            #line hidden
            this.Write(">().Result;\r\n\t\t\t");
            
            #line 369 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n");
            
            #line 372 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t#endregion\r\n\t}\r\n");
            
            #line 375 "E:\git\github\WebApiProxy\WebApiProxy.Tasks\Templates\CSharpProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}\r\n#endregion\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class CSharpProxyTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
