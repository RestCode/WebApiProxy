<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WebApiProxy.Core.Models" #>
<#@ import namespace="System.Collections.Generic" #>


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using <#= Configuration.Namespace#>.Models;

// Proxies
namespace <#= Configuration.Namespace#>
{
	/// <summary>
    /// Client configuration.
    /// </summary>
    public partial class Configuration
	{
		/// <summary>
        /// Web Api Base Address.
        /// </summary>
		public static string <#= Configuration.Name #>BaseAddress = "<#= Configuration.Metadata.Host #>";
		
	}
}

#region Models
namespace <#= Configuration.Namespace#>.Models
{
<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("class"))) { #>	
	/// <summary>
    /// <#= model.Description.ToSummary() #>
    /// </summary>
	public partial class <#=model.Name#>
	{
		#region Constants
<# foreach(var constantItem in model.Constants) { #>
		/// <summary>
        /// <#= constantItem.Description.ToSummary() #>
        /// </summary>
		public const <#= constantItem.Type #> <#= constantItem.Name #> = <#= constantItem.Value #>;
<#}#>
		#endregion

		#region Properties
<# foreach(var propertyItem in model.Properties) { #>
		/// <summary>
        /// <#= propertyItem.Description.ToSummary() #>
        /// </summary>
		public virtual <#= propertyItem.Type #> <#= propertyItem.Name #> { get; set; }
<#}#>
		#endregion
	}	
<#}#>

<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("enum"))) { #>	
	public enum <#=model.Name#>
	{
<# foreach(var constantItem in model.Constants) { #>
		<#= constantItem.Name #> = <#= constantItem.Value #>,
<#}#>		
	}
<#}#>
	
}
#endregion
 

<# foreach(var definition in Configuration.Metadata.Definitions) { #>
namespace <#= Configuration.Namespace#>.Clients
{
	/// <summary>
    /// <#= definition.Description.ToSummary() #>
    /// </summary>
	public partial class <#=definition.Name#><#= Configuration.ClientSuffix#> : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; private set; }

		/// <summary>
        /// <#= definition.Description.ToSummary() #>
        /// </summary>
		public <#=definition.Name#><#= Configuration.ClientSuffix#>()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}

		/// <summary>
        /// <#= definition.Description.ToSummary() #>
        /// </summary>
		public <#=definition.Name#><#= Configuration.ClientSuffix#>(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}

		#region Methods
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		var queryParameterString = "\"";
		var bodyParameterString = "";


		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}


		if (allParameters.Any()) {
			queryParameterString = "?";

			queryParameterString += string.Join(" + \"&", allParameters.Where(m => m != null).Select(m => m.Name + "=\" + " + m.Name).ToArray());		
		}

		var parameterList = "";
		var parameterNameList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());

			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));
		}


		var postOrPut =  method.Type.ToTitle() == "Post" || method.Type.ToTitle() == "Put";
		var url = method.Url;
		
		if(!String.IsNullOrEmpty(Configuration.RemoveFromUrl)) {
			url = url.Replace(Configuration.RemoveFromUrl, "");
		}
		
		url = ("\"" + url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
		
#>
        /// <summary>
        /// <#= method.Description.ToSummary() #>
        /// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
        /// <returns></returns>
		public virtual async Task<HttpResponseMessage> <#= method.Name #>Async(<#= parameterList#>)
		{
			return await HttpClient.<#=method.Type.ToTitle()#><#= postOrPut ? "AsJson" : "" #>Async<#= postOrPut && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" #>(<#=url#><#=bodyParameterString#>);
		}

		/// <summary>
        /// <#= method.Description.ToSummary() #>
        /// </summary>
<# foreach(var p in method.UrlParameters) {#>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
        /// <returns></returns>
		public virtual <#= String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType #> <#= method.Name #>(<#= parameterList#>)
		{
			<#
			var parametersValues = String.IsNullOrEmpty(bodyParameterString) ? (url.IndexOf("+") > -1 ? url.Substring(url.IndexOf("+") + 1) : "") : bodyParameterString.Substring(2);
			#>
			 var result = Task.Run(() => <#= method.Name #>Async(<#=parameterNameList#>)).Result;
			 EnsureSuccess(result);			 
			 <# if(!String.IsNullOrEmpty(method.ReturnType)) { #>			 			 
             return result.Content.ReadAsAsync<<#= method.ReturnType #>>().Result;
			 <# } #>
		}

<#}#>	    
		/// <summary>
        /// Releases the unmanaged resources and disposes of the managed resources.       
        /// </summary>
		public void Dispose()
        {
            HttpClient.Dispose();
        }

		#endregion

		#region Private methods
		private void EnsureSuccess(HttpResponseMessage result)
		{
			if (!result.IsSuccessStatusCode)
            {
				throw result.Content.ReadAsAsync<ApiException>().Result;
            }
		}
		#endregion
				
	}

}
<# } #>

