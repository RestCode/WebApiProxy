<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WebApiProxy.Core.Models" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using <#= Configuration.Namespace #>.Models;
<# 
if(!String.IsNullOrWhiteSpace(Configuration.NamespacesToInclude))
{
	foreach(var ns in Configuration.NamespacesToInclude.Split(','))
	{
	#>using <#= ns #>;
	<#
	}
}
#>

// Proxies
namespace <#= Configuration.Namespace #>
{
	/// <summary>
    /// Client configuration.
    /// </summary>
    public partial class Configuration
	{
		/// <summary>
        /// Web Api Base Address.
        /// </summary>
		public static string <#= Configuration.Name #>BaseAddress = "<#= Configuration.Metadata.Host #>";
		
	}
}

#region Models
namespace <#= Configuration.Namespace #>.Models
{
	public class ApiException : Exception {}

<# if(Configuration.GenerateModels) { #>
<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("class"))) { #>	
	/// <summary>
    /// <#= model.Description.ToSummary() #>
    /// </summary>
	public partial class <#=model.Name#>
	{
		#region Constants
<# foreach(var constantItem in model.Constants) { #>
		/// <summary>
        /// <#= constantItem.Description.ToSummary() #>
        /// </summary>
		public const <#= constantItem.Type #> <#= constantItem.Name #> = <#= constantItem.Value #>;
<#}#>
		#endregion

		#region Properties
<# foreach(var propertyItem in model.Properties) { #>
		/// <summary>
        /// <#= propertyItem.Description.ToSummary() #>
        /// </summary>
		public virtual <#= propertyItem.Type #> <#= propertyItem.Name #> { get; set; }
<#}#>
		#endregion
	}	
<#}#>

<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("enum"))) { #>	
	public enum <#=model.Name#>
	{
<# foreach(var constantItem in model.Constants) { #>
		<#= constantItem.Name #> = <#= constantItem.Value #>,
<#}#>		
	}
<#}#>
<#}#>
}
#endregion
 
<# 	
	// Initialize clients namespace

	if(Configuration.ClientsNamespaceSuffix == null)
	{
		Configuration.ClientsNamespaceSuffix = ".Clients";
	}
	else if(!String.IsNullOrEmpty(Configuration.ClientsNamespaceSuffix) && 
			!Configuration.ClientsNamespaceSuffix.StartsWith("."))
	{
		Configuration.ClientsNamespaceSuffix = "." + Configuration.ClientsNamespaceSuffix;
	}
#>
namespace <#= Configuration.Namespace #><#= Configuration.ClientsNamespaceSuffix #>
{
    public abstract partial class BaseClient : IDisposable
    {
        /// <summary>
        /// Gests the HttpClient.
        /// </summary>
        public HttpClient HttpClient { get; private set; }

		public BaseClient()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}

        public BaseClient(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}

        protected async Task EnsureSuccess(HttpResponseMessage response)
		{
            if (!response.IsSuccessStatusCode)
            {
                throw await response.Content.ReadAsAsync<ApiException>();
            }
		}

        protected async Task<T> ProcessResponse<T>(HttpResponseMessage response)
        {
            await EnsureSuccess(response);
            return await response.Content.ReadAsAsync<T>();
        }

        protected async Task ProcessResponse(HttpResponseMessage response)
        {
            await EnsureSuccess(response);
        }

        public void Dispose()
        {
            HttpClient.Dispose();
        }
    }

<# foreach(var definition in Configuration.Metadata.Definitions) { #>
	/// <summary>
    /// <#= definition.Description.ToSummary() #>
    /// </summary>
	public partial class <#=definition.Name#><#= Configuration.ClientSuffix#> : BaseClient
	{
		/// <summary>
        /// <#= definition.Description.ToSummary() #>
        /// </summary>
        public <#=definition.Name#><#= Configuration.ClientSuffix#>() : base() { }
		
		/// <summary>
        /// <#= definition.Description.ToSummary() #>
        /// </summary>
        public <#=definition.Name#><#= Configuration.ClientSuffix#>(HttpMessageHandler handler, bool disposeHandler = true) 
            : base(handler, disposeHandler) { }
			
		#region Methods
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		var queryParameterString = "\"";
		var bodyParameterString = "";

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}

		if (allParameters.Any()) {
			queryParameterString = "?";

			queryParameterString += string.Join(" + \"&", allParameters.Where(m => m != null).Select(m => m.Name + "=\" + " + m.Name).ToArray());		
		}

		var parameterList = "";
		var parameterNameList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());

			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));
		}

		var postOrPut =  method.Type.ToTitle() == "Post" || method.Type.ToTitle() == "Put";
		var url = method.Url;
		
		if(!String.IsNullOrEmpty(Configuration.RemoveFromUrl)) {
			url = url.Replace(Configuration.RemoveFromUrl, "");
		}
		
		url = ("\"" + url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
		
#>
		/// <summary>
        /// <#= method.Description.ToSummary() #>
        /// </summary>
<# foreach(var p in method.UrlParameters) {#>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		public virtual async Task<#= String.IsNullOrEmpty(method.ReturnType) ? String.Empty : ("<" + method.ReturnType + ">") #> <#= method.Name #>Async(<#= parameterList#>)
		{
			<# var httpCall = "await HttpClient." + method.Type.ToTitle() + (postOrPut ? "AsJson" : "") + "Async" + (postOrPut && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "") + "(" + url + bodyParameterString + ")"; #>
<# if(!String.IsNullOrEmpty(method.ReturnType)) { #>
			return await ProcessResponse<<#= method.ReturnType #>>(
                <#= httpCall #>);
<# } else { #>
			await ProcessResponse(
                <#= httpCall #>);
<# } #>
		}

		/// <summary>
        /// <#= method.Description.ToSummary() #>
        /// </summary>
<# foreach(var p in method.UrlParameters) {#>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		public virtual <#= String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType #> <#= method.Name #>(<#= parameterList#>)
		{
		    return Task.Run(() => <#= method.Name #>Async(<#=parameterNameList#>)).Result;
		}

<# } /* Client methods */ #>
		
		#endregion

	}

<# } /* Clients */ #>	 
}