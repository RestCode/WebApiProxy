<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WebApiProxy.Core.Models" #>
<#@ import namespace="System.Collections.Generic" #>
//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using <#= Configuration.Namespace#>.Models;

#region Proxies
namespace <#= Configuration.Namespace#>
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string <#= Configuration.Name #>BaseAddress = "<#= Configuration.Metadata.Host #>";
		
	}
}
#endregion

#region Models
namespace <#= Configuration.Namespace#>.Models
{

 public class WebApiProxyResponseException : Exception
  {

    public HttpResponseMessage Response { get; private set; }


    public WebApiProxyResponseException(HttpResponseMessage response): base("A " + response.StatusCode + " (" + (int)response.StatusCode + ") http exception occured. See response.")
		{
			Response = response;
		}
	}


<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("class"))) { #>	
	/// <summary>
	/// <#= model.Description.ToSummary() #>
	/// </summary>
	public partial class <#=model.Name#>
	{
		#region Constants
<# foreach(var constantItem in model.Constants) { #>
		/// <summary>
		/// <#= constantItem.Description.ToSummary() #>
		/// </summary>
		public const <#= constantItem.Type #> <#= constantItem.Name #> = <#= constantItem.Value #>;
<#}#>
		#endregion

		#region Properties
<# foreach(var propertyItem in model.Properties) { #>
		/// <summary>
		/// <#= propertyItem.Description.ToSummary() #>
		/// </summary>
		public virtual <#= propertyItem.Type #> <#= propertyItem.Name #> { get; set; }
<#}#>
		#endregion
	}	
<#}#>

<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("enum"))) { #>	
	/// <summary>
	/// <#= model.Description.ToSummary() #>
	/// </summary>
	public enum <#=model.Name#>
	{
<# foreach(var constantItem in model.Constants) { #>

		/// <summary>
		/// <#= constantItem.Description.ToSummary() #>
		/// </summary>
		<#= constantItem.Name #> = <#= constantItem.Value #>,
<#}#>		
	}
<#}#>
	
}
#endregion

#region Interfaces
namespace <#= Configuration.Namespace#>.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

<# foreach(var definition in Configuration.Metadata.Definitions) { #>	
	public partial interface I<#=definition.Name#><#=Configuration.ClientSuffix#> : IClientBase
	{	
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		//var queryParameterString = "\"";
		var bodyParameterString = "";


		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}
	
		var parameterList = "";

		if (allParameters.Any())
		{
			var q = allParameters.Select(m => m.Type + " " + m.Name);
			if (q != null)
				parameterList = string.Join(",", q.ToArray());
		}		
#>

		/// <summary>
		/// <#= method.Description #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		Task<HttpResponseMessage> <#= method.Name #>Async(<#= parameterList#>);

		/// <summary>
		/// <#= method.Description #>
		/// </summary>
<# foreach(var p in method.UrlParameters) {#>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		<#= String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType #> <#= method.Name #>(<#= parameterList#>);
<#}#>				
	}
<#}#>

}
#endregion

#region Clients
namespace <#= Configuration.Namespace#>.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}

		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
            throw new WebApiProxyResponseException(response);
		}

		public virtual string GenerateQueryStrFromKvList(List<KeyValuePair<string, object>> kvList)
	    {
            var urlTpl = string.Join("&",
                             kvList.Select(item =>
                             {
                                 var queryKey = Uri.EscapeDataString(item.Key);
                                 var queryValue = string.Empty;
                                 if (item.Value != null)
                                 {
                                     queryValue = Uri.EscapeDataString(item.Value.ToString());
                                 }
                                 return queryKey + "=" + queryValue;
                             }));
	        return urlTpl;
	    }

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}
	}

<# foreach(var definition in Configuration.Metadata.Definitions) { #>
	/// <summary>
	/// <#= definition.Description.ToSummary() #>
	/// </summary>
	public partial class <#=definition.Name#><#= Configuration.ClientSuffix#> : ClientBase, Interfaces.I<#=definition.Name#><#=Configuration.ClientSuffix#>
	{		
		public <#=definition.Name#><#= Configuration.ClientSuffix#>() : base()
		{
		}

		#region Methods
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable();
		
		var queryParameterString = "\"";
		var bodyParameterString = ", default(HttpResponseMessage)";
		var parameterNameList = "";

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}


		if (allParameters.Any()) {
			queryParameterString = "?";
			queryParameterString += string.Join(" + \"&", allParameters.Where(m => m != null).Select(m => m.Name + "=\" + " + m.Name).ToArray());
			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));
		}

		var parameterList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Where(m => m != null).Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());
		}

		var postOrPut =  method.Type.ToTitle() == "Post" || method.Type.ToTitle() == "Put";

		var urlParts = method.Url.Split(new[] {"?"}, StringSplitOptions.RemoveEmptyEntries);
		var requestUrl = urlParts[0];
		var urlQueryString = string.Empty;
		var hasQueryString = false;

        if (urlParts.Length > 1)
		{
            urlQueryString = urlParts[1];
		    hasQueryString = true;
		}

		requestUrl = System.Text.RegularExpressions.Regex.Replace(requestUrl, @"\{(.*?)\}", "\"+Uri.EscapeUriString(Convert.ToString($1))+\"");


		var urlQueryParts = urlQueryString.Split(new[] {"&"}, StringSplitOptions.RemoveEmptyEntries)
										.Select(item =>
												{
													var kvParts = item.Split(new[] {"="},
																			StringSplitOptions.RemoveEmptyEntries);
													return new KeyValuePair<string, string>(kvParts[0], kvParts[1]);
												})
										.ToList();

		var queryHasParams =
		urlQueryParts.Where(
							item =>
							allParameters.Any(param =>
												string.Equals(item.Value, "{" + param.Name + "}",
															StringComparison.OrdinalIgnoreCase)))
						.ToList();

		var queryHasParamUrlTpl = string.Join("&",
											queryHasParams.Select(
																	item =>
																	string.Format("{0}={1}", item.Key, item.Value)));

		var queryHasParamUrl = System.Text.RegularExpressions.Regex.Replace(queryHasParamUrlTpl, @"\{(.*?)\}", "\"+Uri.EscapeDataString(Convert.ToString($1))+\"");


		var queryHasNoParams = urlQueryParts.Except(queryHasParams).ToList();
		var queryNoParamUrlTpl = string.Join("&",
											queryHasNoParams.Select(
																	item =>
																	string.Format("{0}={1}", item.Key, item.Value)));
#>

		/// <summary>
		/// <#= method.Description #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		public virtual async Task<HttpResponseMessage> <#= method.Name #>Async(<#= parameterList#>)
		{
			var requestUrl = "<#= requestUrl #>";
			<# if(hasQueryString){  #>

				var queryHasParamUrl = "<#= queryHasParamUrl #>";


				<# if(!string.IsNullOrEmpty(queryNoParamUrlTpl)){  #>
					var queryNoParamUrlTpl = "<#= queryNoParamUrlTpl #>";
					var queryNoParamUrl = Generate<#= method.Name #>QueryString(queryNoParamUrlTpl, <#=parameterNameList#>);
				<# }else{ #>
					var queryNoParamUrl = string.Empty;
				<# } #>
			
				if (string.IsNullOrEmpty(queryHasParamUrl))
				{
					requestUrl = requestUrl + "?" + queryNoParamUrl;
				}
				else
				{
					requestUrl = requestUrl + "?" + queryHasParamUrl + "&" + queryNoParamUrl;
				}

			<# } #>

				return await HttpClient.<#=method.Type.ToTitle()#><#= postOrPut ? "AsJson" : "" #>Async<#= postOrPut && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" #>(requestUrl <#= postOrPut ? bodyParameterString:""#>).ConfigureAwait(false);
		}

		<# if(hasQueryString && !string.IsNullOrEmpty(queryNoParamUrlTpl)){  #>
				
			public virtual string Generate<#= method.Name #>QueryString(string urlQueryString, <#= parameterList#>)
			{
				var kvList = Generate<#= method.Name #>KeyValueList( <#=parameterNameList#> );
                var urlTpl = GenerateQueryStrFromKvList(kvList);

        	    return urlTpl;
			}

			public virtual List<KeyValuePair<string, object>> Generate<#= method.Name #>KeyValueList(<#= parameterList#>)
			{
				throw new NotImplementedException();
			}


		<#}#>


		/// <summary>
		/// <#= method.Description #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		public virtual <#= String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType #> <#= method.Name #>(<#= parameterList#>)
		{
			var result = <#= method.Name #>Async(<#=parameterNameList#>).Result;		 
			 
			EnsureSuccess(result);
				 
			<# if(!String.IsNullOrEmpty(method.ReturnType) && method.ReturnType != "void" ) { #>			 			 
			return result.Content.ReadAsAsync<<#= method.ReturnType #>>().Result;
			<# } #>
		}

<#}#>
		#endregion
	}
<# } #>
}
#endregion

