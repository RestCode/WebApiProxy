<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

(function($) {
	"use strict";

	if (!$) {
		throw "jQuery is required";
	}

	$.proxies = $.proxies || { 
		baseUrl: "<#= this.Metadata.Host #>/"
	};

	$.proxies = $.extend({}, $.proxies, {
		defaultOptions: {}
	});

	function invoke(url, type, options, data) {

		var ajaxOptions = $.extend({}, {
			url: appendPathDelimiter($.proxies.baseUrl) + url,
			type: type,
		}, $.proxies.defaultOptions, this.defaultOptions, options);

		ajaxOptions.data = data;
	
		return $.ajax(ajaxOptions);
	}

	function endsWith(str, suffix) {
		return str.indexOf(suffix, str.length - suffix.length) !== -1;
	}

	function appendPathDelimiter(url){
		if(!endsWith(url, '/')){
			return url + '/';
		}
		
		return url;
	}

	/* Proxies */

	<# foreach(var definition in this.Metadata.Definitions) { #>
	$.proxies.<#= definition.Name.ToLower() #> = {
		defaultOptions: {},
<# foreach(var method in definition.ActionMethods) { #>

<#
	var allParameters = method.UrlParameters.AsEnumerable();
	
	if (method.BodyParameter != null) {
		allParameters = allParameters.Concat(new [] { method.BodyParameter });
	}
	var selectedParameters = allParameters.Where(m => m != null).Select(m => m.Name).ToList();
	selectedParameters.Add("options");

	var parameterList = string.Join(",", selectedParameters);
	
	var url = method.Url.Split('?').First();
	url = ("\"" + url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");

#>


	<#= method.Name.ToCamelCasing() #>: function(<#=parameterList#>) {

		var url = <#= url #>;

		var ajaxData;
		<# if (method.UrlParameters.Any()) { #>
			ajaxData = {
			<# foreach (var parameter in method.UrlParameters) { #>
				<#= parameter.Name #>: <#= parameter.Name #>,
			<# } #>
			};
		<# } else { #>
			ajaxData = {};
		<# } #>
		<# if (method.BodyParameter != null) { #>
			ajaxData = $.extend(ajaxData, <#= method.BodyParameter.Name #>);
		<# } #>

		return invoke.call(this, url, "<#= method.Type.ToString().ToLower() #>", options, ajaxData);
	},
<# } #> 
};
	<# } #>
}(jQuery));